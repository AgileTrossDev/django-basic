from ccsds import bch
from ccsds import exceptions
from ccsds.constants import FILL_BYTE


###########################################################################
# Calculates byte value that should be set in TC Header
###########################################################################

def calc_frame_length(cmd_buff):
    return (len(cmd_buff.getbuffer()) - 1)


###########################################################################
# Calculates byte value tat should be set in TC Header
###########################################################################
def validate_frame_length(len):
    return (((1 << 10)) > len)


###########################################################################
# Raises an exception if the number of bits are invalid
###########################################################################
def validate_block_size(num_of_bits):
    if 0 != (num_of_bits % 8):
        raise exceptions.InvalidBlockSize("Block Size are not byte size!")

    if (4 * 8) > num_of_bits:
        raise exceptions.InvalidBlockSize("Block Size too small!")

    if (8 * 8) < num_of_bits:
        raise exceptions.InvalidBlockSize("Block Size too large!")

    return True


###########################################################################
# NOTE: Validation assumes packet_data_len is zero based. (Valid: 0-65535)
###########################################################################
def validate_packet_data_length(packet_data_len):
    if packet_data_len >= 65536:
        raise exceptions.CmdBufferException(
            "Packet Data length is {} larger than CCSDS specification. "
            "standard 8192 bytes".format(packet_data_len))
    
    if packet_data_len < 0:
        raise exceptions.CmdBufferException(
            "Packet Data length is invalid.  Calculated length: {}".format(packet_data_len))
    
    return True


###########################################################################
#  Calculates number of bytes needed to fill out frame
###########################################################################
def calc_num_of_fill_bytes(frame_length, block_size_bytes):
    ret_val = 0
    if((frame_length % block_size_bytes) == 0):
        ret_val = 0
    else:
        ret_val = block_size_bytes - (frame_length % block_size_bytes)

    return ret_val

###########################################################################
# Fills out Transfer Frame data so that it only contains complete tc codeblocks
#
# even_block flag indicates if transfer_frame should be filled to an even block cnt
#
# Chunk out in to codeblock data blocks (e.g. 64bit codeblock, chunk to 56 bit data blocks)
#
# NOTE: block_size is in bits
#
###########################################################################
def fillpad_and_block(tc_transfer_frame, block_size, even_blocks):

    block_data_bytes = (block_size // 8) - 1
    num_fill_bytes = calc_num_of_fill_bytes(len(tc_transfer_frame),
                                            block_data_bytes)
    fill_bytes = FILL_BYTE * num_fill_bytes

    tc_transfer_frame_filled = tc_transfer_frame + fill_bytes

    if even_blocks and not (len(tc_transfer_frame_filled) % 2) == 0:
        tc_transfer_frame_filled += FILL_BYTE * block_data_bytes

    tc_data_blocks = [tc_transfer_frame_filled[i:i + block_data_bytes]
                      for i in range(0, len(tc_transfer_frame_filled), block_data_bytes)]

    return tc_data_blocks


###########################################################################
# Adds the 1 Byte Parity for each TC Codeblock datablock
#
# NOTE: Uses BCH Parity Algorithm
# NOTE: block_size is in bits
#
###########################################################################
def add_parity_and_join(tc_codeblock_data_blocks):
    # New empty byte array to Frame Data w/ Parity Byte
    result = bytearray()

    # Reconstruct TC Frame with calculatee BCH parity for each block
    for block in tc_codeblock_data_blocks:
        parity = bch.block_parity(block)
        result.extend(block)
        result.append(parity)

    return result


###########################################################################
# Returns a copy of the Transfer Frame that has an updated header Frame Length
###########################################################################
def update_frame_length(tc_transfer_frame, block_size):

    return tc_transfer_frame
