import binascii
from unittest.mock import patch

from hamcrest import assert_that, equal_to

from ccsds import utils
from ccsds.utils import add_parity_and_join


###############################################################################
#  Test fill bit calculation
###############################################################################


def test_calc_num_of_fill_bytes():
    # test_case = "test_create_tc_transfer_frame"
    # print("\n\nExecuting Test Case: ", test_case)

    block_size = 7

    # Data is less then Block size
    assert utils.calc_num_of_fill_bytes(1, block_size) == 6
    assert utils.calc_num_of_fill_bytes(2, block_size) == 5
    assert utils.calc_num_of_fill_bytes(3, block_size) == 4
    assert utils.calc_num_of_fill_bytes(4, block_size) == 3
    assert utils.calc_num_of_fill_bytes(5, block_size) == 2
    assert utils.calc_num_of_fill_bytes(6, block_size) == 1
    assert utils.calc_num_of_fill_bytes(7, block_size) == 0

    # Data is less then 2 Blocks
    assert utils.calc_num_of_fill_bytes(8, block_size) == 6
    assert utils.calc_num_of_fill_bytes(9, block_size) == 5
    assert utils.calc_num_of_fill_bytes(10, block_size) == 4
    assert utils.calc_num_of_fill_bytes(11, block_size) == 3
    assert utils.calc_num_of_fill_bytes(12, block_size) == 2
    assert utils.calc_num_of_fill_bytes(13, block_size) == 1
    assert utils.calc_num_of_fill_bytes(14, block_size) == 0

    # Data is less then 3 Blocks
    assert utils.calc_num_of_fill_bytes(15, block_size) == 6
    assert utils.calc_num_of_fill_bytes(16, block_size) == 5
    assert utils.calc_num_of_fill_bytes(17, block_size) == 4
    assert utils.calc_num_of_fill_bytes(18, block_size) == 3
    assert utils.calc_num_of_fill_bytes(19, block_size) == 2
    assert utils.calc_num_of_fill_bytes(20, block_size) == 1
    assert utils.calc_num_of_fill_bytes(21, block_size) == 0


###############################################################################
#  Test fill and block
###############################################################################
def test_fillpad_and_block():

    # Full TF
    tc_transfer_frame = bytearray.fromhex('0A0A0A0A0A 0F0F')
    block_size_bits = 8 * 8

    expected_filled_tf_even = [
        bytearray.fromhex('0A0A0A0A0A0F0F'),
        bytearray.fromhex('55555555555555')
    ]
    even_result = utils.fillpad_and_block(tc_transfer_frame, block_size_bits, True)
    assert_that(even_result, equal_to(expected_filled_tf_even), "failed with {} and {}".format(
        even_result, expected_filled_tf_even
    ))

    expected_filled_tf_odd = [
        bytearray.fromhex('0A0A0A0A0A0F0F')
    ]
    odd_result = utils.fillpad_and_block(tc_transfer_frame, block_size_bits, False)
    assert_that(odd_result, equal_to(expected_filled_tf_odd), "failed with {} and {}".format(
        odd_result, expected_filled_tf_odd
    ))

    # TF less than codeblock data length, fill 1 + even blocks required
    tc_transfer_frame = bytearray.fromhex('0A0A0A0A0A 0F')
    block_size_bits = 8 * 8

    expected_filled_tf_even = [
        bytearray.fromhex('0A0A0A0A0A0F55'),
        bytearray.fromhex('55555555555555')
    ]
    even_result = utils.fillpad_and_block(tc_transfer_frame, block_size_bits, True)
    assert_that(even_result, equal_to(expected_filled_tf_even), "failed with {} and {}".format(
        even_result, expected_filled_tf_even
    ))

    expected_filled_tf_odd = [
        bytearray.fromhex('0A0A0A0A0A0F55')
    ]
    odd_result = utils.fillpad_and_block(tc_transfer_frame, block_size_bits, False)
    assert_that(odd_result, equal_to(expected_filled_tf_odd), "failed with {} and {}".format(
        odd_result, expected_filled_tf_odd
    ))

    # Partial Frame that needs to be filled even
    tc_transfer_frame = bytearray.fromhex('0A0A0A0A0A 0F0F 09')
    block_size_bits = 8 * 8

    expected_filled_tf = [
        bytearray.fromhex('0A0A0A0A0A0F0F'),
        bytearray.fromhex('09555555555555')
    ]
    even_result = utils.fillpad_and_block(tc_transfer_frame, block_size_bits, True)
    assert_that(even_result, equal_to(expected_filled_tf), "failed with {} and {}".format(
        even_result, expected_filled_tf
    ))

    odd_result = utils.fillpad_and_block(tc_transfer_frame, block_size_bits, False)
    assert_that(odd_result, equal_to(expected_filled_tf), "failed with {} and {}".format(
        odd_result, expected_filled_tf
    ))

    # Partial Frame that needs to be even
    tc_transfer_frame = bytearray.fromhex('0A0A0A0A0A0F0F0909090909090909')
    block_size_bits = 8 * 8

    expected_filled_tf_even = [
        bytearray.fromhex('0A0A0A0A0A0F0F'),
        bytearray.fromhex('09090909090909'),
        bytearray.fromhex('09555555555555'),
        bytearray.fromhex('55555555555555')
    ]
    even_result = utils.fillpad_and_block(tc_transfer_frame, block_size_bits, True)
    assert_that(even_result, equal_to(expected_filled_tf_even), "failed with {} and {}".format(
        even_result, expected_filled_tf_even
    ))

    expected_filled_tf_odd = [
        bytearray.fromhex('0A0A0A0A0A0F0F'),
        bytearray.fromhex('09090909090909'),
        bytearray.fromhex('09555555555555')
    ]
    odd_result = utils.fillpad_and_block(tc_transfer_frame, block_size_bits, False)
    assert_that(odd_result, equal_to(expected_filled_tf_odd), "failed with {} and {}".format(
        odd_result, expected_filled_tf_odd
    ))


@patch('ccsds.utils.bch.block_parity')
def test_add_parity_and_join(parity_mock):
    parity_mock.side_effect = [1, 2, 3]
    blocks = [bytearray.fromhex('FFEEDD'), bytearray.fromhex('CCBBAA'), bytearray.fromhex('998877')]

    expected_result = bytearray.fromhex('FFEEDD01CCBBAA0299887703')
    result = add_parity_and_join(blocks)
    assert_that(result, equal_to(expected_result), "failed with {} and {}".format(binascii.hexlify(result),
                                                                                  binascii.hexlify(expected_result)))
